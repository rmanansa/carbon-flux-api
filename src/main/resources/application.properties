#### Database settings. Default profile ####
spring.datasource.url=xxxx
spring.datasource.username=xxxx
spring.datasource.password=xxxx

spring.datasource.platform=postgres
spring.datasource.driverClassName=org.postgresql.Driver
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.database-platform = org.hibernate.dialect.PostgreSQL94Dialect
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.default_schema=ui
# below configuration controls Hikari connection pool settings
#maximum number of milliseconds(30 sec) that a client will wait for a connection
spring.datasource.hikari.connection-timeout=30000
#minimum number of idle connections maintained by HikariCP in a connection pool
spring.datasource.hikari.minimum-idle=2
#maximum pool size
spring.datasource.hikari.maximum-pool-size=8
#maximum idle time(5 min) for connection
spring.datasource.hikari.idle-timeout=300000
# maximum lifetime in milliseconds(30 minutes) of a connection in the pool after it is closed.
spring.datasource.hikari.max-lifetime=1800000
#default auto-commit behavior.
spring.datasource.hikari.auto-commit=true
#### Leave profile empty when running docker-compose.
#### DB connect params will be picked up from env file.
#### Optionally can set this to following values: [dev|localhost] for DEV or localhost development.
spring.profiles.active=local
#### This is necessary. Database schema being used ####
spring.flyway.schemas=ui
spring.jackson.serialization.INDENT_OUTPUT=true
# H2 DB console disabled. Enable for development
spring.h2.console.enabled=false

# pretty print the json responses we get from partner api
json.pretty.print=true
# third-party partner api that our app integrates with
partner.api.url=https://api.openweathermap.org/data/2.5
# third-party Basic Auth creds
partner.api.key=f534c807c9f86fa022068f3ce7210ce7
partner.api.exclude.list=daily,hourly


jwt.header=Authorization
jwt.secret=xxxxxxxx
jwt.expiration=604800
jwt.route.authentication.path=/auth
jwt.route.authentication.refresh=/refresh

#### The application will listen to this port ####
server.port=8080
api.context.path=/weather/api
admin.api.context.path=/weather/admin/api/
spring.main.allow-bean-definition-overriding=true

keycloak.auth-server-url=http://localhost:8180/auth
keycloak.realm=SpringBootKeycloak
keycloak.resource=login-app
keycloak.public-client=true

keycloak.principal-attribute=preferred_username